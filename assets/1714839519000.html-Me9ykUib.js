import { _ as _export_sfc, o as openBlock, c as createElementBlock, b as createStaticVNode } from "./app-C6L_rV1c.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="grpc" tabindex="-1"><a class="header-anchor" href="#grpc" aria-hidden="true">#</a> GRPC</h2><h3 id="grpc-快速上手" tabindex="-1"><a class="header-anchor" href="#grpc-快速上手" aria-hidden="true">#</a> gRPC 快速上手</h3><p>https://grpc.io/docs/languages/go/quickstart/</p><h3 id="protoc-工具" tabindex="-1"><a class="header-anchor" href="#protoc-工具" aria-hidden="true">#</a> protoc 工具</h3><p>https://github.com/protocolbuffers/protobuf/releases</p><p>Go 安装协议编译插件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go <span class="token function">install</span> google.golang.org/protobuf/cmd/protoc-gen-go@v1.26\ngo <span class="token function">install</span> google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="protocol-buffers" tabindex="-1"><a class="header-anchor" href="#protocol-buffers" aria-hidden="true">#</a> Protocol Buffers</h3><p>官方文档: https://protobuf.dev/</p><p>proto 3 语言指南:</p><p>https://protobuf.dev/programming-guides/proto3/</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">option</span> go_package <span class="token operator">=</span> <span class="token string">&quot;./;proto&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">service</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>\n  <span class="token keyword">rpc</span> <span class="token function">SayHello</span> <span class="token punctuation">(</span><span class="token class-name">HelloRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">HelloReply</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">message</span> <span class="token class-name">HelloRequest</span> <span class="token punctuation">{</span>\n  <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">message</span> <span class="token class-name">HelloReply</span> <span class="token punctuation">{</span>\n  <span class="token builtin">string</span> message <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成 Go 文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>protoc <span class="token parameter variable">--go_out</span><span class="token operator">=</span>. --go-grpc_out<span class="token operator">=</span>require_unimplemented_servers<span class="token operator">=</span>false:. hello.proto\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>服务端代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;context&quot;</span>\n    <span class="token string">&quot;fmt&quot;</span>\n    <span class="token string">&quot;google.golang.org/grpc&quot;</span>\n    <span class="token string">&quot;grpc_demo/hello&quot;</span>\n    <span class="token string">&quot;net&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">type</span> Server <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n	hello<span class="token punctuation">.</span>UnimplementedServerServer\n<span class="token punctuation">}</span>\n\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span>  <span class="token function">SayHello</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span>request <span class="token operator">*</span>hello<span class="token punctuation">.</span>HelloRequest<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>hello<span class="token punctuation">.</span>HelloReply<span class="token punctuation">,</span><span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&amp;</span>hello<span class="token punctuation">.</span>HelloReply<span class="token punctuation">{</span>Message<span class="token punctuation">:</span><span class="token string">&quot;Hello &quot;</span><span class="token operator">+</span>request<span class="token punctuation">.</span>Name<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>\n    g <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    s <span class="token operator">:=</span> Server<span class="token punctuation">{</span><span class="token punctuation">}</span>\n    hello<span class="token punctuation">.</span><span class="token function">RegisterGreeterServer</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span>\n    lis<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;:8080&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;failed to listen: &quot;</span><span class="token operator">+</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    g<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;context&quot;</span>\n    <span class="token string">&quot;fmt&quot;</span>\n    <span class="token string">&quot;google.golang.org/grpc&quot;</span>\n    <span class="token string">&quot;grpc_demo/proto&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>\n    conn<span class="token punctuation">,</span>err <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:8080&quot;</span><span class="token punctuation">,</span>grpc<span class="token punctuation">.</span><span class="token function">WithInsecure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> err<span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">{</span>\n        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    c <span class="token operator">:=</span> hello<span class="token punctuation">.</span><span class="token function">NewGreeterClient</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>\n    r<span class="token punctuation">,</span>err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">SayHello</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>hello<span class="token punctuation">.</span>HelloRequest<span class="token punctuation">{</span>Name<span class="token punctuation">:</span><span class="token string">&quot;bobby&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> err<span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">{</span>\n        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Message<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="grpc-的4种数据流" tabindex="-1"><a class="header-anchor" href="#grpc-的4种数据流" aria-hidden="true">#</a> GRPC 的4种数据流</h3><ul><li>服务端单向流</li><li>客户端单向流</li><li></li></ul>', 20);
const _hoisted_21 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_21);
}
const _1714839519000_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "1714839519000.html.vue"]]);
export {
  _1714839519000_html as default
};
